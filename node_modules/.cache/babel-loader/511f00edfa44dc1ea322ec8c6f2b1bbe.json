{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => ({\n        url: '/users',\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'User',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'User',\n            id\n          }))];\n        } else return [{\n          type: 'User',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewUser: builder.mutation({\n      query: initialUserData => ({\n        url: '/users',\n        method: 'POST',\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidatesTags: [{\n        type: 'User',\n        id: \"LIST\"\n      }]\n    }),\n    updateUser: builder.mutation({\n      query: initialUserData => ({\n        url: '/users',\n        method: 'PATCH',\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'User',\n        id: arg.id\n      }]\n    }),\n    deleteUser: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/users`,\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'User',\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation,\n  useConfirmEmailMutation,\n  usePasswordResetRequestMutation,\n  useResetPasswordMutation\n} = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// creates memoized selector\nconst selectUsersData = createSelector(selectUsersResult, usersResult => usersResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","method","body","invalidatesTags","updateUser","deleteUser","_ref","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","useConfirmEmailMutation","usePasswordResetRequestMutation","useResetPasswordMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state","_selectUsersData"],"sources":["/home/luis/Documents/live/barcelove-client/src/features/users/usersApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst usersAdapter = createEntityAdapter({})\n\nconst initialState = usersAdapter.getInitialState()\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getUsers: builder.query({\n            query: () => ({\n                url: '/users',\n                validateStatus: (response, result) => {\n                    return response.status === 200 && !result.isError\n                },\n            }),\n            transformResponse: responseData => {\n                const loadedUsers = responseData.map(user => {\n                    user.id = user._id\n                    return user\n                });\n                return usersAdapter.setAll(initialState, loadedUsers)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'User', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'User', id }))\n                    ]\n                } else return [{ type: 'User', id: 'LIST' }]\n            }\n        }),\n        addNewUser: builder.mutation({\n            query: initialUserData => ({\n                url: '/users',\n                method: 'POST',\n                body: {\n                    ...initialUserData,\n                }\n            }),\n            invalidatesTags: [\n                { type: 'User', id: \"LIST\" }\n            ]\n        }),\n        updateUser: builder.mutation({\n            query: initialUserData => ({\n                url: '/users',\n                method: 'PATCH',\n                body: {\n                    ...initialUserData,\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'User', id: arg.id }\n            ]\n        }),\n        deleteUser: builder.mutation({\n            query: ({ id }) => ({\n                url: `/users`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'User', id: arg.id }\n            ]\n        }),\n\n\n    }),\n})\n\nexport const {\n    useGetUsersQuery,\n    useAddNewUserMutation,\n    useUpdateUserMutation,\n    useDeleteUserMutation,\n    useConfirmEmailMutation,\n    usePasswordResetRequestMutation,\n    useResetPasswordMutation\n\n} = usersApiSlice\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\n\n// creates memoized selector\nconst selectUsersData = createSelector(\n    selectUsersResult,\n    usersResult => usersResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllUsers,\n    selectById: selectUserById,\n    selectIds: selectUserIds\n    // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module"}