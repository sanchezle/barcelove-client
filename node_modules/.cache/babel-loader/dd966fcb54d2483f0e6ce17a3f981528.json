{"ast":null,"code":"import { apiSlice } from \"../../app/api/apiSlice\";\nimport { logOut, setCredentials } from \"./authSlice\";\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/auth',\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      })\n    }),\n    sendLogout: builder.mutation({\n      query: () => ({\n        url: '/auth/logout',\n        method: 'POST'\n      }),\n      async onQueryStarted(arg, _ref) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref;\n        try {\n          const {\n            data\n          } = await queryFulfilled;\n          console.log(data);\n          dispatch(logOut());\n          setTimeout(() => {\n            dispatch(apiSlice.util.resetApiState());\n          }, 1000);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }),\n    refresh: builder.mutation({\n      query: () => ({\n        url: '/auth/refresh',\n        method: 'GET'\n      }),\n      async onQueryStarted(arg, _ref2) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref2;\n        try {\n          const {\n            data\n          } = await queryFulfilled;\n          console.log(data);\n          const {\n            accessToken\n          } = data;\n          dispatch(setCredentials({\n            accessToken\n          }));\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }),\n    // New registration mutation\n    registerUser: builder.mutation({\n      query: newUserData => ({\n        url: '/users',\n        method: 'POST',\n        body: newUserData\n      }),\n      async onQueryStarted(arg, _ref3) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref3;\n        try {\n          // Handle the response from the server after registration\n          const {\n            data\n          } = await queryFulfilled;\n          console.log('Registration successful:', data);\n          // Optional: Dispatch login or other actions after successful registration\n        } catch (err) {\n          console.error('Registration error:', err);\n        }\n      }\n    })\n  })\n});\nexport const {\n  useLoginMutation,\n  useRegisterUserMutation,\n  useSendLogoutMutation,\n  useRefreshMutation,\n  usePasswordResetRequestMutation,\n  useResetPasswordMutation\n} = authApiSlice;","map":{"version":3,"names":["apiSlice","logOut","setCredentials","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","sendLogout","onQueryStarted","arg","_ref","dispatch","queryFulfilled","data","console","log","setTimeout","util","resetApiState","err","refresh","_ref2","accessToken","registerUser","newUserData","_ref3","error","useLoginMutation","useRegisterUserMutation","useSendLogoutMutation","useRefreshMutation","usePasswordResetRequestMutation","useResetPasswordMutation"],"sources":["/home/luis/Documents/live/barcelove-client/src/features/auth/authApiSlice.js"],"sourcesContent":["import { apiSlice } from \"../../app/api/apiSlice\"\nimport { logOut, setCredentials } from \"./authSlice\"\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        login: builder.mutation({\n            query: credentials => ({\n                url: '/auth',\n                method: 'POST',\n                body: { ...credentials }\n            })\n        }),\n        sendLogout: builder.mutation({\n            query: () => ({\n                url: '/auth/logout',\n                method: 'POST',\n            }),\n            async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n                try {\n                    const { data } = await queryFulfilled\n                    console.log(data)\n                    dispatch(logOut())\n                    setTimeout(() => {\n                        dispatch(apiSlice.util.resetApiState())\n                    }, 1000)\n                } catch (err) {\n                    console.log(err)\n                }\n            }\n        }),\n        refresh: builder.mutation({\n            query: () => ({\n                url: '/auth/refresh',\n                method: 'GET',\n            }),\n            async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n                try {\n                    const { data } = await queryFulfilled\n                    console.log(data)\n                    const { accessToken } = data\n                    dispatch(setCredentials({ accessToken }))\n                } catch (err) {\n                    console.log(err)\n                }\n            }\n        }),\n        // New registration mutation\n        registerUser: builder.mutation({\n            query: newUserData => ({\n                url: '/users',\n                method: 'POST',\n                body: newUserData,\n            }),\n            async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n                try {\n                    // Handle the response from the server after registration\n                    const { data } = await queryFulfilled;\n                    console.log('Registration successful:', data);\n                    // Optional: Dispatch login or other actions after successful registration\n                } catch (err) {\n                    console.error('Registration error:', err);\n                }\n            }\n        }), \n        \n    })\n})\n\nexport const {\n    useLoginMutation,\n    useRegisterUserMutation,\n    useSendLogoutMutation,\n    useRefreshMutation,\n     usePasswordResetRequestMutation, useResetPasswordMutation \n} = authApiSlice; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,MAAM,EAAEC,cAAc,QAAQ,aAAa;AAEpD,OAAO,MAAMC,YAAY,GAAGH,QAAQ,CAACI,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACpBC,KAAK,EAAEC,WAAW,KAAK;QACnBC,GAAG,EAAE,OAAO;QACZC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAE,GAAGH;QAAY;MAC3B,CAAC;IACL,CAAC,CAAC;IACFI,UAAU,EAAER,OAAO,CAACE,QAAQ,CAAC;MACzBC,KAAK,EAAEA,CAAA,MAAO;QACVE,GAAG,EAAE,cAAc;QACnBC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMG,cAAcA,CAACC,GAAG,EAAAC,IAAA,EAAgC;QAAA,IAA9B;UAAEC,QAAQ;UAAEC;QAAe,CAAC,GAAAF,IAAA;QAClD,IAAI;UACA,MAAM;YAAEG;UAAK,CAAC,GAAG,MAAMD,cAAc;UACrCE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;UACjBF,QAAQ,CAACjB,MAAM,CAAC,CAAC,CAAC;UAClBsB,UAAU,CAAC,MAAM;YACbL,QAAQ,CAAClB,QAAQ,CAACwB,IAAI,CAACC,aAAa,CAAC,CAAC,CAAC;UAC3C,CAAC,EAAE,IAAI,CAAC;QACZ,CAAC,CAAC,OAAOC,GAAG,EAAE;UACVL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QACpB;MACJ;IACJ,CAAC,CAAC;IACFC,OAAO,EAAErB,OAAO,CAACE,QAAQ,CAAC;MACtBC,KAAK,EAAEA,CAAA,MAAO;QACVE,GAAG,EAAE,eAAe;QACpBC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMG,cAAcA,CAACC,GAAG,EAAAY,KAAA,EAAgC;QAAA,IAA9B;UAAEV,QAAQ;UAAEC;QAAe,CAAC,GAAAS,KAAA;QAClD,IAAI;UACA,MAAM;YAAER;UAAK,CAAC,GAAG,MAAMD,cAAc;UACrCE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;UACjB,MAAM;YAAES;UAAY,CAAC,GAAGT,IAAI;UAC5BF,QAAQ,CAAChB,cAAc,CAAC;YAAE2B;UAAY,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,OAAOH,GAAG,EAAE;UACVL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QACpB;MACJ;IACJ,CAAC,CAAC;IACF;IACAI,YAAY,EAAExB,OAAO,CAACE,QAAQ,CAAC;MAC3BC,KAAK,EAAEsB,WAAW,KAAK;QACnBpB,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEkB;MACV,CAAC,CAAC;MACF,MAAMhB,cAAcA,CAACC,GAAG,EAAAgB,KAAA,EAAgC;QAAA,IAA9B;UAAEd,QAAQ;UAAEC;QAAe,CAAC,GAAAa,KAAA;QAClD,IAAI;UACA;UACA,MAAM;YAAEZ;UAAK,CAAC,GAAG,MAAMD,cAAc;UACrCE,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,IAAI,CAAC;UAC7C;QACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;UACVL,OAAO,CAACY,KAAK,CAAC,qBAAqB,EAAEP,GAAG,CAAC;QAC7C;MACJ;IACJ,CAAC;EAEL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTQ,gBAAgB;EAChBC,uBAAuB;EACvBC,qBAAqB;EACrBC,kBAAkB;EACjBC,+BAA+B;EAAEC;AACtC,CAAC,GAAGpC,YAAY"},"metadata":{},"sourceType":"module"}