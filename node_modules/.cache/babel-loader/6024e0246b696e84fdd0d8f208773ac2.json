{"ast":null,"code":"import { apiSlice } from \"../../app/api/apiSlice\";\nimport { logOut, setCredentials } from \"./authSlice\";\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/auth',\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      })\n    }),\n    sendLogout: builder.mutation({\n      query: () => ({\n        url: '/auth/logout',\n        method: 'POST'\n      }),\n      async onQueryStarted(arg, _ref) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref;\n        try {\n          await queryFulfilled;\n          dispatch(logOut());\n          setTimeout(() => {\n            dispatch(apiSlice.util.resetApiState());\n          }, 1000);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }),\n    refresh: builder.mutation({\n      query: () => ({\n        url: '/auth/refresh',\n        method: 'GET'\n      }),\n      async onQueryStarted(arg, _ref2) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref2;\n        try {\n          const {\n            data\n          } = await queryFulfilled;\n          dispatch(setCredentials({\n            accessToken: data.accessToken\n          }));\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }),\n    registerUser: builder.mutation({\n      query: newUserData => ({\n        url: '/users',\n        method: 'POST',\n        body: newUserData\n      })\n    }),\n    confirmEmail: builder.mutation({\n      query: token => ({\n        url: `/auth/confirmEmail/${token}`,\n        method: 'GET'\n      })\n    }),\n    passwordResetRequest: builder.mutation({\n      query: email => ({\n        url: '/auth/reset-password',\n        method: 'POST',\n        body: {\n          email\n        }\n      })\n    }),\n    resetPasswordConfirm: builder.mutation({\n      query: _ref3 => {\n        let {\n          email,\n          token,\n          password\n        } = _ref3;\n        return {\n          url: '/auth/reset-password-confirm',\n          method: 'POST',\n          body: {\n            email,\n            token,\n            password\n          }\n        };\n      }\n    })\n  })\n});\nexport const {\n  useLoginMutation,\n  useRegisterUserMutation,\n  useSendLogoutMutation,\n  useRefreshMutation,\n  useConfirmEmailMutation,\n  usePasswordResetRequestMutation,\n  useResetPasswordConfirmMutation // renamed for clarity\n} = authApiSlice;","map":{"version":3,"names":["apiSlice","logOut","setCredentials","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","sendLogout","onQueryStarted","arg","_ref","dispatch","queryFulfilled","setTimeout","util","resetApiState","err","console","log","refresh","_ref2","data","accessToken","registerUser","newUserData","confirmEmail","token","passwordResetRequest","email","resetPasswordConfirm","_ref3","password","useLoginMutation","useRegisterUserMutation","useSendLogoutMutation","useRefreshMutation","useConfirmEmailMutation","usePasswordResetRequestMutation","useResetPasswordConfirmMutation"],"sources":["/home/luis/Documents/live/barcelove-client/src/features/auth/authApiSlice.js"],"sourcesContent":["import { apiSlice } from \"../../app/api/apiSlice\";\nimport { logOut, setCredentials } from \"./authSlice\";\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        login: builder.mutation({\n            query: credentials => ({\n                url: '/auth',\n                method: 'POST',\n                body: { ...credentials }\n            }),\n        }),\n        sendLogout: builder.mutation({\n            query: () => ({\n                url: '/auth/logout',\n                method: 'POST',\n            }),\n            async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n                try {\n                    await queryFulfilled;\n                    dispatch(logOut());\n                    setTimeout(() => {\n                        dispatch(apiSlice.util.resetApiState());\n                    }, 1000);\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n        }),\n        refresh: builder.mutation({\n            query: () => ({\n                url: '/auth/refresh',\n                method: 'GET',\n            }),\n            async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n                try {\n                    const { data } = await queryFulfilled;\n                    dispatch(setCredentials({ accessToken: data.accessToken }));\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n        }),\n        registerUser: builder.mutation({\n            query: newUserData => ({\n                url: '/users',\n                method: 'POST',\n                body: newUserData,\n            }),\n        }),\n        confirmEmail: builder.mutation({\n            query: token => ({\n                url: `/auth/confirmEmail/${token}`,\n                method: 'GET',\n            }),\n        }),\n        passwordResetRequest: builder.mutation({\n            query: email => ({\n                url: '/auth/reset-password',\n                method: 'POST',\n                body: { email },\n            }),\n        }),\n        resetPasswordConfirm: builder.mutation({\n            query: ({ email, token, password }) => ({\n                url: '/auth/reset-password-confirm',\n                method: 'POST',\n                body: { email, token, password },\n            }),\n        }),\n    })\n});\n\nexport const {\n    useLoginMutation,\n    useRegisterUserMutation,\n    useSendLogoutMutation,\n    useRefreshMutation,\n    useConfirmEmailMutation,\n    usePasswordResetRequestMutation,\n    useResetPasswordConfirmMutation, // renamed for clarity\n} = authApiSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}